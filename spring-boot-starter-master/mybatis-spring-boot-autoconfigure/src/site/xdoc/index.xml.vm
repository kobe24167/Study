<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2015-2018 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis Sring-BootStarter | Reference Documentation</title>
    <author email="eduardo.macarron@gmail.com">Eduardo Macarr√≥n</author>
  </properties>

  <body>
    <section name="Introduction">
      <subsection name="What is MyBatis-Spring-Boot-Starter?">
  
        <p>The MyBatis-Spring-Boot-Starter help you build quickly MyBatis applications on top of the
        <a href="http://projects.spring.io/spring-boot/">Spring Boot</a>.</p>
            
        <p>By using this module you will achieve:</p>

        <ul>
          <li>Build standalone applications.</li>
          <li>Reduce the boilerplate to almost zero.</li>
          <li>Less XML configuration.</li>
        </ul>
            
      </subsection>

      <subsection name="Requirements">
        <p>
          The MyBatis-Spring-Boot-Starter requires following versions:
        </p>
        <table>
          <thead>
            <tr>
              <th>MyBatis-Spring-Boot-Starter</th>
              <th><a href="http://www.mybatis.org/spring/index.html#Requirements">MyBatis-Spring</a></th>
              <th>Spring Boot</th>
              <th>Java</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td><b>2.0</b></td>
              <td>2.0 or higher</td>
              <td>2.0 or higher</td>
              <td>8 or higher</td>
            </tr>
            <tr>
              <td><b>1.3</b></td>
              <td>1.3 or higher</td>
              <td>1.5 or higher</td>
              <td>6 or higher</td>
            </tr>
            <tr>
              <td><b>1.2</b></td>
              <td>1.3 or higher</td>
              <td>1.4 or higher</td>
              <td>6 or higher</td>
            </tr>
            <tr>
              <td><b>1.1</b></td>
              <td>1.3 or higher</td>
              <td>1.3 or higher</td>
              <td>6 or higher</td>
            </tr>
            <tr>
              <td><b>1.0</b></td>
              <td>1.2 or higher</td>
              <td>1.3 or higher</td>
              <td>6 or higher</td>
            </tr>
          </tbody>
        </table>
      </subsection>

      <subsection name="Installation">
      <p>
        To use the MyBatis-Spring-Boot-Starter module, you just need to include the
        <code>${project.artifactId}.jar</code> file and its dependencies(<code>mybatis.jar</code>, <code>mybatis-spring.jar</code> and etc ...) in the classpath.
      </p>
      <p>
        If you are using Maven just add the following dependency to your <code>pom.xml</code>:
      </p>
        <source><![CDATA[
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>${project.version}</version>
</dependency>]]></source>

      <p>
        If using gradle add this to your <code>build.gradle</code>:
      </p>
        <source><![CDATA[
dependencies {
  compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${project.version}")
}]]></source>

    </subsection>

    <subsection name="Quick Setup">
      <p>
        As you may already know, to use MyBatis with Spring you need at least an <code>SqlSessionFactory</code>
        and at least one mapper interface.
      </p>

      <p>
        MyBatis-Spring-Boot-Starter will:
      </p>
      <ul>
      <li>Autodetect an existing <code>DataSource</code>.</li>
      <li>Will create and register an instance of a <code>SqlSessionFactory</code> passing that <code>DataSource</code> as an input using the <code>SqlSessionFactoryBean</code>.</li>
      <li>Will create and register an instance of a <code>SqlSessionTemplate</code> got out of the <code>SqlSessionFactory</code>.</li>
      <li>Autoscan your mappers, link them to the <code>SqlSessionTemplate</code> and register them to Spring context so they can be injected into your beans.</li>
      </ul>

      <p>
        Suppose we have the following mapper:
      </p>
      
<source><![CDATA[
@Mapper
public interface CityMapper {

  @Select("SELECT * FROM CITY WHERE state = #{state}")
  City findByState(@Param("state") String state);

}]]></source>

      <p>
        You just need to create a normal Spring boot application and let the mapper be injected like follows(available on Spring 4.3+):
      </p>
      
                  
<source><![CDATA[
@SpringBootApplication
public class SampleMybatisApplication implements CommandLineRunner {

  private final CityMapper cityMapper;

  public SampleMybatisApplication(CityMapper cityMapper) {
    this.cityMapper = cityMapper;
  }

  public static void main(String[] args) {
    SpringApplication.run(SampleMybatisApplication.class, args);
  }

  @Override
  public void run(String... args) throws Exception {
    System.out.println(this.cityMapper.findByState("CA"));
  }

}
]]></source>

            <p>This is all you have to do. You application can now be run as a normal Spring Boot application.</p>
          </subsection>

    <subsection name="Advanced scanning">
      <p>The MyBatis-Spring-Boot-Starter will search, by default, for mappers marked with the <code>@Mapper</code> annotation.</p>
      
      <p>You may want to specify a custom annotation or a marker interface for scanning. If so, you must use the <code>@MapperScan</code> annotation. 
      See more about it in the <a href="http://www.mybatis.org/spring/mappers.html#scan">MyBatis-Spring reference page.</a></p>
      
      <p>The MyBatis-Spring-Boot-Starter will not start the scanning process if it finds at least one <code>MapperFactoryBean</code> in the
      Spring's context so if you want to stop the scanning at all you should register your mappers explicitly with <code>@Bean</code> methods.</p>
    </subsection>        
    
    <subsection name="Using an SqlSession">
      <p>An instance of a <code>SqlSessionTemplate</code> is created and added to the Spring context, so you can use the MyBatis API
      letting it be injected into your beans like follows(available on Spring 4.3+):</p>

<source><![CDATA[
@Component
public class CityDao {

  private final SqlSession sqlSession;

  public CityDao(SqlSession sqlSession) {
    this.sqlSession = sqlSession;
  }

  public City selectCityById(long id) {
    return this.sqlSession.selectOne("selectCityById", id);
  }

}]]></source>
       
    </subsection>
       
    <subsection name="Configuration">
      <p>As any other Spring Boot application a MyBatis-Spring-Boot-Application configuration parameters are stored inside the
      <code>application.properties</code>(or <code>application.yml</code>).</p>
      
      <p>MyBatis uses the prefix <code>mybatis</code> for its properties</p>

      <p>Available properties are:</p>
        <table>
    <thead>
      <tr>
        <th>
          Property
        </th>
        <th>
          Description
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <code>config-location</code>
        </td>
        <td>
          Location of MyBatis xml config file.
        </td>
      </tr>
      <tr>
        <td>
          <code>check-config-location</code>
        </td>
        <td>
          Indicates whether perform presence check of the MyBatis xml config file.
        </td>
      </tr>
      <tr>
        <td>
          <code>mapper-locations</code>
        </td>
        <td>
          Locations of Mapper xml config file.
        </td>
      </tr>
      <tr>
        <td>
          <code>type-aliases-package</code>
        </td>
        <td>
          Packages to search for type aliases. (Package delimiters are "<code>,; \t\n</code>")
        </td>
      </tr>
      <tr>
        <td>
          <code>type-aliases-super-type</code>
        </td>
        <td>
          The super class for filtering type alias.
          If this not specifies, the MyBatis deal as type alias all classes that searched from <code>type-aliases-package</code>.
        </td>
      </tr>
      <tr>
        <td>
          <code>type-handlers-package</code>
        </td>
        <td>
          Packages to search for type handlers. (Package delimiters are "<code>,; \t\n</code>")
        </td>
      </tr>
      <tr>
        <td>
          <code>executor-type</code>
        </td>
        <td>
          Executor type: <code>SIMPLE</code>, <code>REUSE</code>, <code>BATCH</code>.
        </td>
      </tr>
      <tr>
        <td>
          <code>configuration-properties</code>
        </td>
        <td>
          Externalized properties for MyBatis configuration. Specified properties can be used as placeholder on MyBatis config file and Mapper file.
          For detail see the <a href="http://www.mybatis.org/mybatis-3/configuration.html#properties">MyBatis reference page</a>
        </td>
      </tr>
      <tr>
        <td>
          <code>configuration</code>
        </td>
        <td>
          A MyBatis <code>Configuration</code> bean. About available properties see the <a href="http://www.mybatis.org/mybatis-3/configuration.html#settings">MyBatis reference page</a>.
          <span class="label important">NOTE</span> This property cannot be used at the same time with the <code>config-location</code>.
        </td>
      </tr>
    </tbody>
    </table>

    <p>For example:</p>
<source><![CDATA[
# application.properties
mybatis.type-aliases-package=com.example.domain.model
mybatis.type-handlers-package=com.example.typehandler
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.configuration.default-fetch-size=100
mybatis.configuration.default-statement-timeout=30
...
]]></source>
        <source><![CDATA[
# application.yml
mybatis:
    type-aliases-package: com.example.domain.model
    type-handlers-package: com.example.typehandler
    configuration:
        map-underscore-to-camel-case: true
        default-fetch-size: 100
        default-statement-timeout: 30
...
]]></source>


      </subsection>

      <subsection name="Using a ConfigurationCustomizer">
        <p>
          The MyBatis-Spring-Boot-Starter provide opportunity to customize a MyBatis configuration generated by auto-configuration using Java Config.
          The MyBatis-Spring-Boot-Starter will search beans that implements the <code>ConfigurationCustomizer</code> interface by automatically,
          and call a method that customize a MyBatis configuration. (Available since 1.2.1 or above)
        </p>

        <p>For example:</p>

        <source><![CDATA[
// @Configuration class
@Bean
ConfigurationCustomizer mybatisConfigurationCustomizer() {
  return new ConfigurationCustomizer() {
    @Override
    public void customize(Configuration configuration) {
      // customize ...
    }
  };
}]]></source>

      </subsection>

      <subsection name="Using the SpringBootVFS">
        <p>
          The MyBatis-Spring-Boot-Starter provides the <code>SpringBootVFS</code> as an implementation class of <code>VFS</code>.
          The <code>VFS</code> is used for searching classes (e.g. target class of type alias, type handler class) from an application (or application server).
          If you run a Spring Boot application using the executable jar, you need to use the <code>SpringBootVFS</code>.
          The auto-configuration feature provided by the MyBatis-Spring-Boot-Starter used it automatically,
          but it does not use automatically by a manual configuration (e.g. when uses multiple <code>DataSource</code>).
        </p>

        <p>
          How to use the <code>SpringBootVFS</code> on manual configuration:
        </p>

        <source><![CDATA[
// @Configuration class
@Bean
public SqlSessionFactory masterSqlSessionFactory() throws Exception {
  SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
  factoryBean.setDataSource(masterDataSource());
  factoryBean.setVfs(SpringBootVFS.class); // Sets the SpringBootVFS class into SqlSessionFactoryBean
  // ...
  return factoryBean.getObject();
}
]]></source>
      </subsection>

      <subsection name="Detecting MyBatis components">

        <p>The MyBatis-Spring-Boot-Starter will detects beans that implements following interface provided by MyBatis.</p>

        <ul>
          <li><a href="http://www.mybatis.org/mybatis-3/configuration.html#plugins">Interceptor</a></li>
          <li><a href="http://www.mybatis.org/mybatis-3/configuration.html#databaseIdProvider">DatabaseIdProvider</a></li>
        </ul>

      </subsection>

      <subsection name="Running Samples">
        <p>The project provides two samples so you play and experiment with them:</p>
        
        <table>
    <thead>
      <tr>
        <th>
          Sample
        </th>
        <th>
          Description
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <a href="https://github.com/mybatis/spring-boot-starter/tree/master/mybatis-spring-boot-samples/mybatis-spring-boot-sample-annotation">
          1st Sample
          </a>
        </td>
        <td>
          Show the simplest scenario with just a mapper and a bean where the mapper is injected into. This is the sample we saw in the Quick Setup section.
        </td>
      </tr>
      <tr>
        <td>
          <a href="https://github.com/mybatis/spring-boot-starter/tree/master/mybatis-spring-boot-samples/mybatis-spring-boot-sample-xml">
          2nd Sample
          </a>
        </td>
        <td>
          Shows how to use a Mapper that has its statements in an xml file and Dao that uses an <code>SqlSesionTemplate</code>.
        </td>
      </tr>
    </tbody>
    </table>
        
      </subsection> 
    </section>
  </body>

</document>
